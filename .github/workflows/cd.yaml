name: CD

on: 
  workflow_call:
    inputs:
      path:
        description: The path where to look for a Visual Studio Solution file (without a trailing slash).
        type: string
        required: false
        default: ''
    secrets:
      NUGET_API_KEY:
        required: true

env:
  BUILD_CONFIG: Release
  DOTNET_GLOBAL_JSON: ${{ inputs.path != '' && format('{0}/global.json', inputs.path) || 'global.json' }}
  RESTORE_PATTERN: ${{ inputs.path != '' && format('{0}/**/packages.lock.json', inputs.path) || '**/packages.lock.json' }}
  ARTIFACTS_PATH: ${{ inputs.path != '' && format('{0}/nupkg', inputs.path) || 'nupkg' }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Required by NBGV
          fetch-depth: 0

      - name: .NET Setup
        uses: zyactions/dotnet-setup@v1
        with:
          global-json-file: ${{ env.DOTNET_GLOBAL_JSON }}
          problem-matcher: false

      - name: Detect Version
        id: nbgv
        uses: dotnet/nbgv@master
        with:
          path: ${{ inputs.path }}

      - name: Create Release
        uses: flobernd/actions/github/create-release@master
        with:
          tag-name: v${{ steps.nbgv.outputs.SimpleVersion }}
          target-commitish: ${{ github.sha }}
          generate-release-notes: true

  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      FILTERED_SOLUTION: ${{ inputs.path != '' && format('{0}/Packages.slnf', inputs.path) || 'Packages.slnf' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Required by NBGV
          fetch-depth: 0

      - name: Find Solution
        id: find
        uses: flobernd/actions/dotnet/find-solution@master
        with:
          directory: ${{ inputs.path }}

      - uses: flobernd/actions/dotnet/filter-solution@master
        name: Filter Solution
        with:
          solution: ${{ steps.find.outputs.solution }}
          # This pattern is relative to the solution file and does not need to be prefixed with
          # the 'directory' input value
          pattern: |
            **/*.csproj
            !**/*.Test*.csproj
            !**/*.Examples*.csproj
          output: ${{ env.FILTERED_SOLUTION }}

      - name: .NET Setup
        uses: zyactions/dotnet-setup@v1
        with:
          global-json-file: ${{ env.DOTNET_GLOBAL_JSON }}
          problem-matcher: true

      - name: .NET Cache Packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles(env.RESTORE_PATTERN) }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: .NET Restore
        uses: zactions/dotnet-restore@v1
        with:
          workspace: ${{ env.FILTERED_SOLUTION }}

      - name: .NET Pack
        uses: flobernd/actions/dotnet/pack@master
        with:
          workspace: ${{ env.FILTERED_SOLUTION }}
          configuration: ${{ env.BUILD_CONFIG }}
          output: ${{ env.ARTIFACTS_PATH }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ${{ env.ARTIFACTS_PATH }}

  publish:
    name: Publish to ${{ matrix.feed.name }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        feed:
          - { name: 'GitHub', source: 'https://nuget.pkg.github.com/zysharp/index.json', key: 'GITHUB_TOKEN'  }
          - { name: 'NuGet' , source: 'https://api.nuget.org/v3/index.json'            , key: 'NUGET_API_KEY' }
    needs: build
    steps:
      - name: .NET Setup
        uses: zyactions/dotnet-setup@v1
        with:
          global-json-file: ${{ env.DOTNET_GLOBAL_JSON }}
          problem-matcher: false

      - name: Download Packages
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: ${{ env.ARTIFACTS_PATH }}

      - name: .NET NuGet Push
        uses: flobernd/actions/dotnet/nuget-push@master
        with:
          packages: ${{ format('{0}/*.nupkg', env.ARTIFACTS_PATH) }}
          nuget-source: ${{ matrix.feed.source }}
          nuget-api-key: ${{ secrets[matrix.feed.key] }}
